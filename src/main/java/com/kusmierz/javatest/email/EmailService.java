package com.kusmierz.javatest.email;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Service;

import java.time.LocalDateTime;
import java.util.List;

// represents service-layer of RESTApi
// class to handle business logic
@Service
public class EmailService {
    @Autowired
    private EmailRepository emailRepository;

    public List<Email> getAllEmails() {

        return emailRepository.findAll();
    }

    // get all emails that are received by a receiver (and CC)
    public List<Email> getAllEmailsTo(String receiver){
        // only consider sent mails (SENT, SPAM, DELETE)
        return emailRepository.findByEmailToContainingOrEmailCCContainingAndStateNot(receiver, receiver, EmailState.DRAFT);
    }
    public Email getEmailById(Long id) {

        // if there is an email with that ID it will be returned, otherwise null will be returned
        return emailRepository.findById(id).orElse(null);
    }

    public List<Email> getEmailsByState(EmailState state) {
        return emailRepository.findByState(state);
    }

    public List<Email> getEmailsByEmailFrom(String emailFrom) {
        // especially needed for automated spam detection
        return emailRepository.findByEmailFrom(emailFrom);
    }

    public Email createEmail(Email email) {
        // set created and last update date here
        // ID will be generated by database

        email.setCreatedDate(LocalDateTime.now());
        email.setLastUpdateDate(LocalDateTime.now());
        email.setState(EmailState.DRAFT);
        return emailRepository.save(email);
    }

    public Email updateEmail(Long id, Email updatedEmail) {
        // only emails with state draft can be updated
        Email draftEmail = emailRepository.findById(id).orElse(null);

        // check if email has state draft or if it exists by id (see above)
        if(draftEmail != null && draftEmail.getState() == EmailState.DRAFT) {
            // update everything from updatedEmail to draftEmail except of createdDate and ID
            draftEmail.setEmailFrom(updatedEmail.getEmailFrom());
            draftEmail.setEmailTo(updatedEmail.getEmailTo());
            draftEmail.setEmailSubject(updatedEmail.getEmailSubject());
            draftEmail.setEmailBody(updatedEmail.getEmailBody());
            draftEmail.setLastUpdateDate(LocalDateTime.now());

            // save email in database
            return emailRepository.save(draftEmail);
        }

        // above condition not met
        return null;
    }

    public Email sendEmail(Long id) {
        // only emails with state DRAFT can be sent
        Email sentEmail = emailRepository.findById(id).orElse(null);

        if(sentEmail != null && sentEmail.getState() == EmailState.DRAFT) {
            sentEmail.setState(EmailState.SENT);
            sentEmail.setLastUpdateDate(LocalDateTime.now());
             return emailRepository.save(sentEmail);
        }

        return null;
    }

    public void deleteEmail(Long id) {

        // check if mail by this id exists
        Email deletedEmail = emailRepository.findById(id).orElse(null);
        if(deletedEmail != null) {
            if(deletedEmail.getState() == EmailState.DELETED || deletedEmail.getState() == EmailState.DRAFT){
                // if state was changed to DELETED before or state is DRAFT, it will be deleted from database finally
                emailRepository.deleteById(id);
            }
            else {
                // state will be changed to DELETED
                deletedEmail.setState(EmailState.DELETED);
                deletedEmail.setLastUpdateDate(LocalDateTime.now());
            }
        }
    }

    public void deleteAllEmails() {
        emailRepository.deleteAll();
    }

    // scheduled job to mark mails from "carl@gbtec.com" every day at 10:00
    // cron-like expression: 0 seconds, 0 minutes, 10 hours. "* * ?" -> every day
    @Scheduled(cron = "0 0 10 * * ?")
    public void markAsSpamScheduledTask() {
        List<Email> spamCandidateEmails = emailRepository.findByEmailFromContaining("carl@gbtec.com");

        for(Email email : spamCandidateEmails) {
            // exclude mails that are already marked as SPAM
            if(email.getState() == EmailState.SENT) {
                email.setState(EmailState.SPAM);
                email.setLastUpdateDate(LocalDateTime.now());
                emailRepository.save(email);
            }
        }
    }

    // only for testing purposes
    public void createTestEmails() {
        Email email1 = new Email();
        email1.setEmailFrom("marcus@gbtec.com");
        email1.setEmailTo(List.of("andrew@gbtec.com", "peter@gbtec.com"));
        email1.setEmailSubject("Test Email 1");
        email1.setEmailBody("This is a test email 1.");

        Email email2 = new Email();
        email2.setEmailFrom("carl@gbtec.com");
        email2.setEmailTo(List.of("andrew@gbtec.com", "peter@gbtec.com"));
        email2.setEmailCC(List.of("sven@gbtec.com", "mike@gbtec.com"));
        email2.setEmailSubject("Spam Email 2");
        email2.setEmailBody("This is a test spam email 2.");

        Email email3 = new Email();
        email3.setEmailFrom("marcus@gbtec.com");
        email3.setEmailTo(List.of("andrew@gbtec.com", "peter@gbtec.com"));
        email3.setEmailCC(List.of("sven@gbtec.com", "mike@gbtec.com"));
        email3.setEmailSubject("Test Email 3");
        email3.setEmailBody("This is a test email 3.");

        Email email4 = new Email();
        email4.setEmailFrom("carl@gbtec.com");
        email4.setEmailTo(List.of("andrew@gbtec.com", "peter@gbtec.com"));
        email4.setEmailSubject("Spam Email 4");
        email4.setEmailBody("This is a test spam email 4.");

        Email email5 = new Email();
        email5.setEmailFrom("marcus@gbtec.com");
        email5.setEmailTo(List.of("andrew@gbtec.com", "peter@gbtec.com"));
        email5.setEmailSubject("Test Email 5");
        email5.setEmailBody("This is a test email 5.");

        createEmail(email1);
        createEmail(email2);
        createEmail(email3);
        createEmail(email4);
        createEmail(email5);
    }
}
